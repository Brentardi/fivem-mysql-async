{"hash":"4b16b732a0a889ece1ce469cc89aca08800f3e76","data":{"allWebPage":{"edges":[{"node":{"path":"/content/pages/setup/","content":"<h2 id=\"setup\"><a href=\"#setup\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Setup</h2>\n<p>To Install mysql-async your first need to have installed a MySQL Database.</p>\n"}},{"node":{"path":"/content/pages/setup-database-options/","content":"<h4 id=\"database-options\"><a href=\"#database-options\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Database Options</h4>\n<p>Included in the table are the benchmark results of 1,000,000 inserts, with 20 done per server tick, that should mean it is about 100 inserts per second.</p>\n"}},{"node":{"path":"/content/pages/setup-resource/","content":"<h4 id=\"installing-the-resource\"><a href=\"#installing-the-resource\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Installing the Resource</h4>\n<p> After you have installed a database, you will have to add the resource to the server. To do this, first  <a href=\"https://github.com/brouznouf/fivem-mysql-async/releases\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">download</a> the <em>Source Code (zip)</em> then extract the contents to the /resources/ folder of your server configuration.</p>\n<p>To learn more about configuring your server follow this <a href=\"https://docs.fivem.net/docs/server-manual/setting-up-a-server/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link</a> to the FiveM Documentation about the step-by-step guide on setting up FXServer.</p>\n<p>After the resource has been extracted you will need to add <code>ensure mysql-async</code> to your server configuration, and proceed with configuring the resource. </p>\n"}},{"node":{"path":"/content/pages/configuration/","content":"<h2 id=\"configuration\"><a href=\"#configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuration</h2>\n<p><em>mysql-async</em> is configured by setting <code>set mysql_connection_string \"[string]\"</code>. The connection string can either be formatted like an url:</p>\n<pre class=\"language-text\"><code class=\"language-text\">set mysql_connection_string &quot;mysql://user:password@host/database?charset=utf8mb4&quot;</code></pre>\n<p>Here options are chained <code>&#x26;</code>. The other option is to to use an option string where each variable is seperated by an <code>;</code>, which would look like:</p>\n<pre class=\"language-text\"><code class=\"language-text\">set mysql_connection_string &quot;database=mysqlasync;charset=utf8mb4&quot;</code></pre>\n<p>The configuration options available for these strings are listed below. </p>\n"}},{"node":{"path":"/content/pages/configuration-options/","content":"<h4 id=\"configuration-options\"><a href=\"#configuration-options\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuration Options</h4>\n<p>This is taken directly from the <a href=\"https://github.com/mysqljs/mysql#connection-options\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mysql.js Readme file</a>, but trimmed to only applicable connection and pooling options, or changed a bit to accomodate legacy settings. </p>\n"}},{"node":{"path":"/content/pages/configuration-additional/","content":"<h4 id=\"additional-configuration-options\"><a href=\"#additional-configuration-options\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Additional Configuration Options</h4>\n<p>These additional configuration are to be set in the server configuration file, in a similar way to\nsetting the <code>mysql_connection_string</code>.</p>\n"}},{"node":{"path":"/content/pages/queries/","content":"<h2 id=\"queries\"><a href=\"#queries\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Queries</h2>\n<p> All query types in mysql-async can be fired using either <em>Sync</em> or <em>Async</em> methods, which can be retrieved from the MySQL object. The last parameter of an Async function is always the callback, the argument of the callback gets returned by <em>Sync</em> functions.</p>\n<p>Contrary to older <em>Sync</em> implementations, these functions are safe to use, since they are non-blocking and just wrappers around the <em>Async</em> calls. But for a possible migration to other Database implementations, the use of the Sync functions should be discouraged.</p>\n<h3 id=\"mysqlready\"><a href=\"#mysqlready\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL.ready</h3>\n<p>You need to encapsulate your code into <code>MySQL.ready</code> to be sure that the mod will be available and initialized before your first request. In subsequent examples the <code>MySQL.ready</code> function will not be shown, and it is expected that the code is encapsulated.</p>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>MySQL<span class=\"token punctuation\">.</span>Sync<span class=\"token punctuation\">.</span><span class=\"token function\">fetchScalar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT @parameters'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'@parameters'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  <span class=\"token string\">'string'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\nstring\n]]</span><span class=\"token comment\">--</span></code></pre>\n<h3 id=\"execute\"><a href=\"#execute\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>execute</h3>\n<p>Execute a mysql query which should not send any result (like a Insert / Delete / Update), and will return the number of affected rows. </p>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INTO users_log (x, y, z, playerId) VALUES (@x, @y, @z, @id)'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> player<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>affectedRows<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>affectedRows<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\n1\n]]</span><span class=\"token comment\">--</span></code></pre>\n<h3 id=\"fetchall\"><a href=\"#fetchall\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>fetchAll</h3>\n<p>Fetch results from MySQL and returns them in the form of an Array of Objects: </p>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">fetchAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM users WHERE id = @id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> playerId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\n[{\n  \"id\": 95585726093402110,\n  \"cash\": 0,\n  \"bank\": 0,\n  \"skin\": \"{}\",\n  \"online\": true,\n  \"lastSeen\": 1590656804000\n}]\n]]</span><span class=\"token comment\">--</span></code></pre>\n<h3 id=\"fetchscalar\"><a href=\"#fetchscalar\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>fetchScalar</h3>\n<p>Fetch the first field of the first row in a query:</p>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">fetchScalar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT COUNT(1) FROM users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\n15\n]]</span><span class=\"token comment\">--</span></code></pre>\n<h3 id=\"insert\"><a href=\"#insert\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>insert</h3>\n<p>Returns the last insert id of the inserted item. Needs an auto-incremented primary key to work. </p>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INTO users_log (x, y, z, playerId) VALUES (@x, @y, @z, @id)'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> player<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>insertId<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>insertId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\n1137\n]]</span><span class=\"token comment\">--</span></code></pre>\n<h3 id=\"store\"><a href=\"#store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>store</h3>\n<p>The store export should be used for storing query strings, when a lot of queries are expected to be triggered at once. The idea behind this feature is, that while recieving data puts stress on your server infrastructure, so does sending data. And the biggest polluter for this resource is sending overly long and complicated query strings.</p>\n<p>While the server is running you want to minimize the impact of sending a lot of queries at once puts on your architecture, thus you can already store these queries ahead of time, and just pass the id returned by the callback function and pass the parameters for these queries along.</p>\n<pre class=\"language-lua\"><code class=\"language-lua\">insertUserLog <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\nMySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INSERT INTO users_log SET ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>storeId<span class=\"token punctuation\">)</span> insertUser <span class=\"token operator\">=</span> storeId <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- ...</span>\nMySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>insertUserLog<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'playerId'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> player<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>insertId<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre>\n<p>This works like the example above, but the query string does not need to be reset and is a bit more elegant in the writing.</p>\n"}},{"node":{"path":"/content/pages/transactions/","content":"<h2 id=\"transactions\"><a href=\"#transactions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Transactions</h2>\n<p> A transaction will only commit all queries to the database, if all queries to the database succeed. If one of them fails, no changes to the database will be made. This can be easily used when e.g. transfering money, making sure that the money field is positive. A transaction would fail if someone would attempt to have negative cash, so that no money would be transfered.</p>\n<p>Since the transaction will either fail or succeed, the callback of the function will either answer with true or false depending on if the transaction succeeded. If it fails an error message will be printed, but it is an intended one, since the commit to the database would be likely unwanted.</p>\n<p>The following example shows the same transaction being done twice in different ways. </p>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'UPDATE users SET cash = cash - @transfer WHERE id = @senderId'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'UPDATE users SET cash = cash + @transfer WHERE id = @recipientId'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'transfer'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'senderId'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> senderId<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'recipientId'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> recipientId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\ntrue or false, depending on if cash goes negative or not.\n]]</span><span class=\"token comment\">--</span></code></pre>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span>\n      query <span class=\"token operator\">=</span> <span class=\"token string\">'UPDATE users SET cash = cash - @transfer WHERE id = @senderId'</span><span class=\"token punctuation\">,</span>\n      parameters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'transfer'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'senderId'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> senderId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      query <span class=\"token operator\">=</span> <span class=\"token string\">'UPDATE users SET cash = cash + @transfer WHERE id = @recipientId'</span><span class=\"token punctuation\">,</span>\n      parameters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'transfer'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'recipientId'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> recipientId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\ntrue or false, depending on if cash goes negative or not.\n]]</span><span class=\"token comment\">--</span></code></pre>\n"}},{"node":{"path":"/content/pages/gui-and-dev/","content":"<h2 id=\"gui--dev\"><a href=\"#gui--dev\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GUI &#x26; Dev</h2>\n<p>With administration rights on your server, if you are unsure how to get those check the\n<a href=\"https://docs.fivem.net/docs/server-manual/setting-up-a-server/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">step-by-step guide on setting up FXServer</a>,\nyou can type in the command <code>mysql</code> into the console to open the GUI. You can open that console via the <kbd>F8</kbd> key.\nIt should show you a concise summary of how your server is doing.</p>\n<p>The first tab shows you a time-resolved graph showing how long the queries took time in a five minute interval.\nAs a general rule of thumb the server should not spend more than 300,000ms querying the database. It could become especially problematic\nif the amount of queries is at that point lower than 6,000, at which point your queries are likely too slow and\nare in need of optimization.</p>\n<p>The second tab shows you the same as the first tab, but instead of the queries being time-resolved they are resolved by the resources\nwhich trigger them. So you can see which resources ask for the largest amount of database time.</p>\n<p>The last slow query tab lists the 21 slowest queries. If they are all below the max-limit in <a href=\"#setup\">table for MySQL servers</a>,\nthen there is no need to panic, it might be database and not a query related issue.</p>\n"}},{"node":{"path":"/content/pages/gui-and-dev-toggle-print/","content":"<h4 id=\"toggle-debug-print\"><a href=\"#toggle-debug-print\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Toggle Debug Print</h4>\n<p>Given you have admin rights, you can use the command <code>mysql:debug</code> which flips interally the value\nfor <code>mysql_debug</code> to <code>1</code> or <code>0</code>, so it enables you to turn on the debug prints\nto the console or a file, or both given your settings for <code>mysql_debug_output</code>.</p>\n"}}]},"allConfigOption":{"edges":[{"node":{"path":"/content/config-options/host/","name":"host | server | data source | datasource | addr | address","content":"<p>The hostname of the database you are connecting to. (Default: <code>localhost</code>)</p>\n"}},{"node":{"path":"/content/config-options/port/","name":"port","content":"<p>The port number to connect to. (Default: <code>3306</code>)</p>\n"}},{"node":{"path":"/content/config-options/local-address/","name":"localAddress","content":"<p>The source IP address to use for TCP connection. (Optional)</p>\n"}},{"node":{"path":"/content/config-options/socket-path/","name":"socketPath","content":"<p>The path to a unix domain socket to connect to. When used <code>host</code> and <code>port</code> are ignored.</p>\n"}},{"node":{"path":"/content/config-options/user/","name":"user | user id | userid | user name | username | uid","content":"<p>The MySQL user to authenticate as.</p>\n"}},{"node":{"path":"/content/config-options/password/","name":"password | pwd","content":"<p>The password of that MySQL user.</p>\n"}},{"node":{"path":"/content/config-options/database/","name":"database | initial catalog","content":"<p>Name of the database to use for this connection (Optional).</p>\n"}},{"node":{"path":"/content/config-options/charset/","name":"charset","content":"<p>The charset for the connection. This is called \"collation\" in the SQL-level of MySQL (like <code>utf8_general_ci</code>).\nIf a SQL-level charset is specified (like <code>utf8mb4</code>) then the default collation for that charset is used.\n(Default: <code>'UTF8_GENERAL_CI'</code>)</p>\n"}},{"node":{"path":"/content/config-options/timezone/","name":"timezone","content":"<p>The timezone configured on the MySQL server. This is used to type cast server date/time values to JavaScript Date object\nand vice versa. This can be <code>'local'</code>, <code>'Z'</code>, or an offset in the form <code>+HH:MM</code> or\n<code>-HH:MM.</code> (Default: <code>'local'</code>)</p>\n"}},{"node":{"path":"/content/config-options/connect-timeout/","name":"connectTimeout","content":"<p>The milliseconds before a timeout occurs during the initial connection to the MySQL server. (Default: <code>10000</code>)</p>\n"}},{"node":{"path":"/content/config-options/stringify-objects/","name":"stringifyObjects","content":"<p>Stringify objects instead of converting to values. (Default: <code>false</code>)</p>\n"}},{"node":{"path":"/content/config-options/insecure-auth/","name":"insecureAuth","content":"<p>Allow connecting to MySQL instances that ask for the old (insecure) authentication method. (Default: <code>false</code>)</p>\n"}},{"node":{"path":"/content/config-options/support-big-numbers/","name":"supportBigNumbers","content":"<p>When dealing with big numbers (BIGINT and DECIMAL columns) in the database, you should enable this option (Default: <code>false</code>).</p>\n"}},{"node":{"path":"/content/config-options/big-number-strings/","name":"bigNumberStrings","content":"<p>Enabling both <code>supportBigNumbers</code> and <code>bigNumberStrings</code> forces big numbers (BIGINT and DECIMAL columns)\nto be always returned as JavaScript String objects (Default: <code>false</code>).</p>\n<p>Enabling <code>supportBigNumbers</code> but leaving <code>bigNumberStrings</code> disabled will return big numbers as String objects\nonly when they cannot be accurately represented with\n<a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_8.5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JavaScript Number objects</a> (which happens when they exceed\nthe [-2<sup>53</sup>, +2<sup>53</sup>] range), otherwise they will be returned as Number objects. This option is ignored if\n<code>supportBigNumbers</code> is disabled.</p>\n"}},{"node":{"path":"/content/config-options/debug/","name":"debug","content":"<p>Prints protocol details to stdout. Can be <code>true</code>/<code>false</code> or an array of packet type names that should be\nprinted. (Default: <code>false</code>)</p>\n"}},{"node":{"path":"/content/config-options/trace/","name":"trace","content":"<p>Generates stack traces on <code>Error</code> to include call site of library entrance (\"long stack traces\").\nSlight performance penalty for most calls. (Default: <code>true</code>)</p>\n"}},{"node":{"path":"/content/config-options/local-infile/","name":"localInfile","content":"<p>Allow <code>LOAD DATA INFILE</code> to use the LOCAL modifier. (Default: <code>true</code>)</p>\n"}},{"node":{"path":"/content/config-options/multiple-statements/","name":"multipleStatements","content":"<p>Allow multiple mysql statements per query. Be careful with this, it could increase the scope of SQL injection attacks. (Default: <code>false</code>)</p>\n"}},{"node":{"path":"/content/config-options/flags/","name":"flags","content":"<p>List of connection flags to use other than the default ones. It is also possible to blacklist default ones.\nFor more information, check <a href=\"https://github.com/mysqljs/mysql#connection-flags\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Connection Flags</a>.</p>\n"}},{"node":{"path":"/content/config-options/ssl/","name":"ssl","content":"<p>Object with ssl parameters or a string containing name of ssl profile. See <a href=\"https://github.com/mysqljs/mysql#ssl-options\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SSL options</a>.</p>\n"}},{"node":{"path":"/content/config-options/acquire-timeout/","name":"acquireTimeout","content":"<p>The milliseconds before a timeout occurs during the connection acquisition. This is slightly different from <code>connectTimeout</code>,\nbecause acquiring a pool connection does not always involve making a connection. If a connection request is queued,\nthe time the request spends in the queue does not count towards this timeout. (Default: <code>10000</code>)</p>\n"}},{"node":{"path":"/content/config-options/wait-for-connections/","name":"waitForConnections","content":"<p>Determines the pool's action when no connections are available and the limit has been reached. If <code>true</code>,\nthe pool will queue the connection request and call it when one becomes available. If <code>false</code>, the pool\nwill immediately call back with an error. (Default: <code>true</code>)</p>\n"}},{"node":{"path":"/content/config-options/connection-limit/","name":"connectionLimit","content":"<p>The maximum number of connections to create at once. (Default: <code>10</code>)</p>\n"}},{"node":{"path":"/content/config-options/queue-limit/","name":"queueLimit","content":"<p>The maximum number of connection requests the pool will queue before returning an error from <code>getConnection</code>.\nIf set to <code>0</code>, there is no limit to the number of queued connection requests. (Default: <code>0</code>)</p>\n"}}]},"allServerVar":{"edges":[{"node":{"path":"/content/server-vars/mysql-debug/","name":"mysql_debug","content":"<p>Possible options are <code>Console</code>, <code>File</code>, <code>FileAndConsole</code> and <code>None</code>.\nIn case of a file output, the file will be located in the current working directory\non starting the server, named like <code>/&#x3C;resourcename>-&#x3C;timestamp>.log</code>. The name of the\nfile can be changed by setting <code>mysql_log_file_format</code>.\n(Default: <code>None</code>)</p>\n"}},{"node":{"path":"/content/server-vars/mysql-slow-query-warning/","name":"mysql_slow_query_warning","content":"<p>Sets a limit in millisecondss, queries slower than this limit will be displayed with a warning at the specified location of\n<code>mysql_debug_output</code>, see above (Default: <code>100</code>)</p>\n"}},{"node":{"path":"/content/server-vars/mysql-log-level/","name":"mysql_log_level","content":"<p>This variable gives control over what goes to the console, and what does not. Add the numbers to get the value to set it to.\n1: Info, 2: Success, 4: Warning, 8: Error. For example you wanted only Info's and Error's appearing in the server console, you would set it to 9.\n(Default: <code>15</code>)</p>\n"}},{"node":{"path":"/content/server-vars/mysql-log-file-format/","name":"mysql_log_file_format","content":"<p>Sets the log file format, relative to the working directory of the server. If <code>mysql_debug</code> is not set to File or FileAndConsole,\nthen this option is useless. <code>%s</code> is replaced with the name of the resource, <code>%d</code> is replaced by a timestamp.\n(Default: <code>%s-%d.log</code>)</p>\n"}}]}},"context":{}}