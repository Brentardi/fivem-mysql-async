{"hash":"eaa7522ecda7f721968d9341458285cb5f98a8b1","data":{"allWebPage":{"edges":[{"node":{"path":"/content/pages/queries/","content":"<h2 id=\"queries\"><a href=\"#queries\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Queries</h2>\n<p> All query types in mysql-async can be fired using either <em>Sync</em> or <em>Async</em> methods, which can be retrieved from the MySQL object. The last parameter of an Async function is always the callback, the argument of the callback gets returned by <em>Sync</em> functions.</p>\n<p>Contrary to older <em>Sync</em> implementations, these functions are safe to use, since they are non-blocking and just wrappers around the <em>Async</em> calls. But for a possible migration to other Database implementations, the use of the Sync functions should be discouraged.</p>\n<h3 id=\"mysqlready\"><a href=\"#mysqlready\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MySQL.ready</h3>\n<p>You need to encapsulate your code into <code>MySQL.ready</code> to be sure that the mod will be available and initialized before your first request. In subsequent examples the <code>MySQL.ready</code> function will not be shown, and it is expected that the code is encapsulated.</p>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>MySQL<span class=\"token punctuation\">.</span>Sync<span class=\"token punctuation\">.</span><span class=\"token function\">fetchScalar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT @parameters'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token string\">'@parameters'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  <span class=\"token string\">'string'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\nstring\n]]</span><span class=\"token comment\">--</span></code></pre>\n<h3 id=\"execute\"><a href=\"#execute\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>execute</h3>\n<p>Execute a mysql query which should not send any result (like a Insert / Delete / Update), and will return the number of affected rows. </p>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INTO users_log (x, y, z, playerId) VALUES (@x, @y, @z, @id)'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> player<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>affectedRows<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>affectedRows<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\n1\n]]</span><span class=\"token comment\">--</span></code></pre>\n<h3 id=\"fetchall\"><a href=\"#fetchall\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>fetchAll</h3>\n<p>Fetch results from MySQL and returns them in the form of an Array of Objects: </p>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">fetchAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT * FROM users WHERE id = @id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'@id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> playerId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\n[{\n  \"id\": 95585726093402110,\n  \"cash\": 0,\n  \"bank\": 0,\n  \"skin\": \"{}\",\n  \"online\": true,\n  \"lastSeen\": 1590656804000\n}]\n]]</span><span class=\"token comment\">--</span></code></pre>\n<h3 id=\"fetchscalar\"><a href=\"#fetchscalar\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>fetchScalar</h3>\n<p>Fetch the first field of the first row in a query:</p>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">fetchScalar</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SELECT COUNT(1) FROM users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\n15\n]]</span><span class=\"token comment\">--</span></code></pre>\n<h3 id=\"insert\"><a href=\"#insert\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>insert</h3>\n<p>Returns the last insert id of the inserted item. Needs an auto-incremented primary key to work. </p>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INTO users_log (x, y, z, playerId) VALUES (@x, @y, @z, @id)'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> player<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>insertId<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>insertId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\n1137\n]]</span><span class=\"token comment\">--</span></code></pre>\n<h3 id=\"store\"><a href=\"#store\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>store</h3>\n<p>The store export should be used for storing query strings, when a lot of queries are expected to be triggered at once. The idea behind this feature is, that while recieving data puts stress on your server infrastructure, so does sending data. And the biggest polluter for this resource is sending overly long and complicated query strings.</p>\n<p>While the server is running you want to minimize the impact of sending a lot of queries at once puts on your architecture, thus you can already store these queries ahead of time, and just pass the id returned by the callback function and pass the parameters for these queries along.</p>\n<pre class=\"language-lua\"><code class=\"language-lua\">insertUserLog <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\nMySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">store</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INSERT INTO users_log SET ?\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>storeId<span class=\"token punctuation\">)</span> insertUserLog <span class=\"token operator\">=</span> storeId <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- ...</span>\nMySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>insertUserLog<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'playerId'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> player<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>insertId<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span></code></pre>\n<p>This works like the example above, but the query string does not need to be reset and is a bit more elegant in the writing.</p>\n"}},{"node":{"path":"/content/pages/transactions/","content":"<h2 id=\"transactions\"><a href=\"#transactions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Transactions</h2>\n<p> A transaction will only commit all queries to the database, if all queries to the database succeed. If one of them fails, no changes to the database will be made. This can be easily used when e.g. transfering money, making sure that the money field is positive. A transaction would fail if someone would attempt to have negative cash, so that no money would be transfered.</p>\n<p>Since the transaction will either fail or succeed, the callback of the function will either answer with true or false depending on if the transaction succeeded. If it fails an error message will be printed, but it is an intended one, since the commit to the database would be likely unwanted.</p>\n<p>The following example shows the same transaction being done twice in different ways. </p>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'UPDATE users SET cash = cash - @transfer WHERE id = @senderId'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'UPDATE users SET cash = cash + @transfer WHERE id = @recipientId'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'transfer'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'senderId'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> senderId<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'recipientId'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> recipientId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\ntrue or false, depending on if cash goes negative or not.\n]]</span><span class=\"token comment\">--</span></code></pre>\n<pre class=\"language-lua\"><code class=\"language-lua\">MySQL<span class=\"token punctuation\">.</span>Async<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">{</span>\n      query <span class=\"token operator\">=</span> <span class=\"token string\">'UPDATE users SET cash = cash - @transfer WHERE id = @senderId'</span><span class=\"token punctuation\">,</span>\n      parameters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'transfer'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'senderId'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> senderId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      query <span class=\"token operator\">=</span> <span class=\"token string\">'UPDATE users SET cash = cash + @transfer WHERE id = @recipientId'</span><span class=\"token punctuation\">,</span>\n      parameters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'transfer'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'recipientId'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> recipientId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">--[[\nprints:\n\ntrue or false, depending on if cash goes negative or not.\n]]</span><span class=\"token comment\">--</span></code></pre>\n"}}]}},"context":{}}